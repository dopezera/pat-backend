Models: modelagem das entidades do BD
Views: tem apenas uma tela de suporte ao login da steam

config.js: define urls e chaves de configuração para diferentes ambientes (dev/prod)
db.js: conecta as informações do db ao sequelize e exporta sequelize
elo.js: atualiza as informações dos usuários mas está sem uso pois faço direto do Plugin
routes.js: era pra separar as rotas mas tá tudo dentro dele feioso 
server.js: contém configurações de cors, bodyParser, view engine (steam), passport etc
utils.js: contém segredo para json web token

// User Routes //

get 'api/users'
listar todos os usuários cadastrados
users [{id, username, kdr, winPercentage, impact}]

get '/api/users/checkedin'
listar todos os usuários que fizeram checkin
Checkin.findAll()
users [{eventId, userId, username, userlvl, createdAt}]

post '/api/user/checkin'
{
    userId: req.body.userId
    username: req.body.username
    userlvl: req.body.userlvl
}
criamos um checkin para o usuário da req e enviamos
res: checkin {id, eventid, userid, username, userlvl}

post '/api/user/signin'
{
    steamid: req.body.steamid
}
res: user {id, username, lvl, token}

post '/api/user/create'
{
    username: req.body.username,
    steamid: req.body.steamid,
    email: req.body.email,
    password: bcrypt.hashSync(req.body.password, 8),
}

É importante lembrar que o plugin já cadastra usuário sozinho se ele jogar no server.
O programa então verifica se existe algum registro do usuário no DB através do steamid.

se já havia cadastro prévio do usuário, complementamos:
res: updatedUser {id: updatedUser.id, username: updatedUser.username, token: generateToken(updatedUser)}

se é a primeira vez do cara ali
res: createdUser {id: createdUser.id, username: createdUser.username, token: generateToken(createdUser)}

get '/api/auth/steam'
Envolve passport e seus mecanismos

get '/api/matches'
res = [{
        id: details.matchId,
        created: details.pstats[0].createdAt,
        map_name: details.pstats[0].map,
        ct_score: details.pstats[0].ct_score,
        t_score: details.pstats[0].t_score,
        winner: details.pstats[0].m_winner,
        players_details: details.pstats,
      }]


--- testes ---

npm i jest
npm i supertest
+ instalar babel
algumacoisa.test.js - naming files
npm test - depois de botar em scripts no package.json